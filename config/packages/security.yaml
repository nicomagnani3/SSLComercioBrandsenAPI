
security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt


    role_hierarchy:
        ROLE_ADMIN:         ROLE_USER
        ROLE_SUPER_ADMIN:   ROLE_ADMIN
 
    providers:

        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
 
    firewalls:

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false         
        login:
            pattern: ^/api/login
            anonymous: true
        register:
            pattern: ^/api/register
            anonymous: true
        get_publicaciones:
            pattern: ^/api/get_publicaciones
            anonymous: true   
        getPublicacionesPorNombre:
            pattern: ^/api/getPublicacionesPorNombre
            anonymous: true  
        get_categorias:
            pattern: ^/api/get_categorias
            anonymous: true  
        getpublicacionescategoria:
            pattern: ^/api/getpublicacionescategoria
            anonymous: true
        getImagenesPublicacion:
            pattern: ^/api/getImagenesPublicacion
            anonymous: true                                 
        swagger:
            pattern: ^/api/doc
            security: false    
           
        main:
            logout: ~
            
            guard:
                authenticators:
                    - App\Security\TokenAuthenticator

            # si quieres, desactiva guardar al usuario en la sesión
            stateless: true

            # quizás otras cosas, como form_login, remember_me, etc
            # ...

    access_control:
        - { path: ^/api/doc,       roles: ROLE_USER }
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/get_publicaciones, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/getPublicacionesPorNombre, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/get_categorias, roles: IS_AUTHENTICATED_ANONYMOUSLY } 
        - { path: ^/api/getpublicacionescategoria, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/getImagenesPublicacion, roles: IS_AUTHENTICATED_ANONYMOUSLY }                 
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/v1,       roles: IS_AUTHENTICATED_FULLY }

        # login:
        #     pattern:  ^/api/login
        #     stateless: true
        #     anonymous: true
        #     form_login:
        #         check_path:               /api/login_check
        #         success_handler:          lexik_jwt_authentication.handler.authentication_success
        #         failure_handler:          lexik_jwt_authentication.handler.authentication_failure
        #         require_previous_session: false
 
        # api:
        #     pattern:   ^/api/v1
        #     stateless: true
        #     anonymous: false
        #     provider: api_user_provider
        #     guard:
        #         authenticators:
        #             - lexik_jwt_authentication.jwt_token_authenticator
 
  

    #     - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #     - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #     - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #     - { path: ^/api/v1,       roles: IS_AUTHENTICATED_FULLY }